import sys

from mesa import Agent, Model
from mesa.time import BaseScheduler
from mesa.space import ContinuousSpace

import pandas as pd


# ---------------------------------------------------------------

class Bridge(Agent):
    """A simple bridge agent"""
    # toggle_flag = True
    vehicle_count = 0

    def __init__(self, unique_id, model, LRP_m, length,
                 name='Unknown', road_name='Unknown'):
        super().__init__(unique_id, model)
        self.name = name
        self.LRP_m = LRP_m  # in meters
        self.length = length  # in meters
        self.road_name = road_name

    def step(self):
        pass
        # print(self.name + ' ' + str(self.length))


# ---------------------------------------------------------------

class Link(Agent):
    vehicle_count = 0

    def __init__(self, unique_id, model, LRP_m, length,
                 name='Unknown', road_name='Unknown'):
        super().__init__(unique_id, model)
        self.name = name
        self.LRP_m = LRP_m  # in meters
        self.length = length  # in meters
        self.road_name = road_name

    def step(self):
        pass

        # try:
        #     self.toggle()
        #     print(self.name + ' ' + str(self.length))
        # except Exception as e:
        #     print("Oops!", e.__class__, "occurred.")


# ---------------------------------------------------------------

class Truck(Agent):
    """A simple bridge agent"""
    truck_flag = False
    speed = 50 * 1000 / 60  # 50 km/h translated into meter per min

    def __init__(self, unique_id, model, generated_by, location_offset=0):
        super().__init__(unique_id, model)
        self.generated_by = generated_by
        self.location = generated_by
        self.location_index = 0
        self.location_offset = location_offset
        self.pos = generated_by.pos
        self.name = ''
        self.length = 1

    def step(self):
        if type(self.location) is not Sink:
            self.drive()

    def drive_to_next(self, distance):

        self.location_index += 1
        next_id = self.model.path_ids[self.location_index]
        next_infra = self.model.infra_dict[next_id]

        if type(next_infra) is Sink:
            self.location.vehicle_count -= 1
            self.location = next_infra
            self.location_offset = 0
            self.location.remove(self)
            return

        if next_infra.length > distance:
            # stay on this object:
            self.location.vehicle_count -= 1
            self.location = next_infra
            self.location_offset = distance
            self.location.vehicle_count += 1
        else:
            # move to next object:
            self.drive_to_next(distance - next_infra.length)



    def drive(self):

        distance = self.speed * BangladeshModel.step_time
        distance_rest = self.location_offset + distance - self.location.length

        if distance_rest > 0:
            # go to the next object
            self.drive_to_next(distance_rest)

        else:
            # remain on the same object
            self.location_offset += distance

        print(self.unique_id + " " + str(self.location.unique_id) + '(' + str(self.location.vehicle_count) + ') ' + str(self.location_offset))


# ---------------------------------------------------------------

class Source(Agent):
    """class variable"""
    truck_counter = 0

    """instance variable""" ""
    truck_generated_flag = False

    vehicle_count = 0

    def __init__(self, unique_id, model, LRP_m, length,
                 name='Unknown', road_name='Unknown'):
        super().__init__(unique_id, model)
        self.name = name
        self.LRP_m = LRP_m  # in meters
        self.length = length  # in meters
        self.road_name = road_name

    def generate_truck(self):
        try:

            agent = Truck('Truck' + str(Source.truck_counter), self.model, self)

            if agent:
                self.model.schedule.add(agent)
                Source.truck_counter += 1   # how many are generated by all sources
                self.vehicle_count += 1     # how many are generated by this source
                self.truck_generated_flag = True
                print("GENERATE " + str(agent.unique_id))

        except Exception as e:
            print("Oops!", e.__class__, "occurred.")

    def step(self):

        if self.model.schedule.steps % 5 == 0:
            self.generate_truck()
        else:
            self.truck_generated_flag = False
            print("GENERATE NOTHING")


# ---------------------------------------------------------------

class Sink(Agent):
    """A simple bridge agent"""
    toggle_flag = True
    vehicle_count = 0

    def __init__(self, unique_id, model, LRP_m, length=0,
                 name='Unknown', road_name='Unknown'):
        super().__init__(unique_id, model)
        self.name = name
        self.LRP_m = LRP_m  # in meters
        self.length = length  # in meters
        self.road_name = road_name

    def remove(self, vehicle):

        # TODO: Collect vehicle data

        self.model.schedule.remove(vehicle)
        self.vehicle_count += 1

        print("SINK " + str(self.unique_id) + ' REMOVE ' + str(vehicle.unique_id))

    def step(self):
        pass


# ---------------------------------------------------------------
# input: latitude and Longitude in Decimal Degrees (DD)
def set_lat_lon_bound(lat_min, lat_max, lon_min, lon_max, edge_ratio=0.02):
    # add edges (margins) to the bounding box
    lat_edge = (lat_max - lat_min) * edge_ratio
    lon_edge = (lon_max - lon_min) * edge_ratio
    x_max = lon_max + lon_edge
    y_max = lat_min - lat_edge
    x_min = lon_min - lon_edge
    y_min = lat_max + lat_edge
    return y_min, y_max, x_min, x_max


# 1 tick 1 min
class BangladeshModel(Model):
    """class variable"""
    step_time = 1  # 1 step is 1 min

    """local"""
    infra_dict = {}

    def __init__(self, x_max=500, y_max=500, x_min=0, y_min=0):

        self.schedule = BaseScheduler(self)
        self.running = True
        self.path_ids = None

        df = pd.read_csv('./data/simpleTransport.csv')

        roads = [
            'N1',
            'N2',
            'N3',
            'N4',
            'N5',
            'N6',
            'N7',
            'N8'
        ]

        df_objects_all = []
        self.num_bridges = 0

        for road in roads:
            df_objects_on_road = df[df['road'] == road].sort_values(by=['km'])

            if not df_objects_on_road.empty:
                df_objects_all.append(df_objects_on_road)
                self.path_ids = df_objects_on_road['id']

                # self.num_agents = len(df.index)

        df = pd.concat(df_objects_all)
        y_min, y_max, x_min, x_max = set_lat_lon_bound(
            df['lat'].min(),
            df['lat'].max(),
            df['lon'].min(),
            df['lon'].max(),
            0.05
        )

        self.space = ContinuousSpace(x_max, y_max, True, x_min, y_min)

        for df in df_objects_all:
            for index, row in df.iterrows():

                model_type = row['model_type']
                agent = None

                if model_type == 'source':
                    agent = Source(row['id'], self, row['km'] * 1000, row['length'],
                                   row['name'], row['road'])
                elif model_type == 'sink':
                    agent = Sink(row['id'], self, row['km'] * 1000, row['length'],
                                 row['name'], row['road'])
                elif model_type == 'bridge':
                    agent = Bridge(row['id'], self, row['km'] * 1000, row['length'],
                                   row['name'], row['road'])
                    self.num_bridges += 1
                elif model_type == 'link':
                    agent = Link(row['id'], self, row['km'] * 1000, row['length'],
                                 row['name'], row['road'])

                if agent:
                    self.schedule.add(agent)
                    self.infra_dict[agent.unique_id] = agent
                    y = row['lat']
                    x = row['lon']
                    self.space.place_agent(agent, (x, y))
                    agent.pos = (x, y)

    def step(self):
        """Advance the model by one step."""
        self.schedule.step()


# ---------------------------------------------------------------
# run model for 100 steps
sim_model = BangladeshModel()
for i in range(100):
    sim_model.step()
